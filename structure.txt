D:\VSCODE\rub2b_lana\rub2b_lana
D:\VSCODE\rub2b_lana\rub2b_lana\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\__pycache__\main.cpython-39.pyc
D:\VSCODE\rub2b_lana\rub2b_lana\.pytest_cache
D:\VSCODE\rub2b_lana\rub2b_lana\backend
D:\VSCODE\rub2b_lana\rub2b_lana\backend\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\.pytest_cache
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_18_0045_02a0c57328f3_initial_database_setup.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_18_1308_aadbb94e6051_add_missing_tables_including_users.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_22_2015_6ed7e3ba8c81_sync_company_items_schema.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_22_2038_54152b5df198_add_name_author_active_to_queries.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0103_f57712d11ccd_add_prices_table_and_update_price_.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0208_24f06da2a916_add_missing_columns_to_goods.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0214_2bb3112111ab_check_all.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0227_91995699b44e_fix_price_history_and_other_tables.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0309_d5af245cf35f_check2.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0321_203cf26e7c40_check4.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0338_1571ae2ad890_restore_price_in_price_history.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0356_f82fe6f1b91c_final_sync.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_0444_a8aa46f5ee09_increase_user_password_length_to_255.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_04_23_1410_88e6ed2b0908_add_units_table.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_05_06_1200_create_wb_tables.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_05_06_1545_068ff5c80fd5_merge_multiple_heads.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\versions\2025_05_06_1726_3dd1fdf2b394_add_brand_to_goods_and_company_items.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\__init__.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\env.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\README
D:\VSCODE\rub2b_lana\rub2b_lana\backend\alembic\script.py.mako
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\__init__.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\category.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\company_item_categories.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\company_item.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\company.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\competitors_wb_categories.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\competitors_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\employee_company.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\goods_categories.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\goods_wb_goods.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\goods_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\goods.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\price_history.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\prices.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\query.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\search_wb_categories.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\search_wb_competitors.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\search_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\search_words_wb_categories.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\search_words_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\stock_history.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\unit.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\user.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\models\warehouse.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\admin.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\auth.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\competitors_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\goods_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\goods.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\moderator.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\search_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\search_words_wb.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\routers\units.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\schemas
D:\VSCODE\rub2b_lana\rub2b_lana\backend\schemas\goods.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\schemas\query.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\schemas\user.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\__pycache__
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\__init__.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\conftest.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\test_admin.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\test_auth.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tests\test_moderator.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\tmp
D:\VSCODE\rub2b_lana\rub2b_lana\backend\__init__.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\database.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\main.py
D:\VSCODE\rub2b_lana\rub2b_lana\backend\pytest.ini
D:\VSCODE\rub2b_lana\rub2b_lana\backend\requirements.txt
D:\VSCODE\rub2b_lana\rub2b_lana\backend\utils.py
D:\VSCODE\rub2b_lana\rub2b_lana\frontend
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\node_modules
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\favicon.ico
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\index.html
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\logo192.png
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\logo512.png
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\manifest.json
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\public\robots.txt
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\components
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\components\Dashboard.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\pages
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\pages\Admin.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\pages\Goods.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\pages\Moderator_item_to_goods.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\pages\Moderator.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\types
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\types\index.ts
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\App.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\index.css
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\src\index.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tests
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tests\Admin.test.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tests\Dashboard.test.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tests\DataTable.test.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tests\QueryForm.test.tsx
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\.eslintrc.json
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\.gitignore
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\craco.config.js
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\package-lock.json
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\package.json
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\package.json.bak
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\README.md
D:\VSCODE\rub2b_lana\rub2b_lana\frontend\tsconfig.json
D:\VSCODE\rub2b_lana\rub2b_lana\venv
D:\VSCODE\rub2b_lana\rub2b_lana\.gitignore
D:\VSCODE\rub2b_lana\rub2b_lana\alembic.ini
D:\VSCODE\rub2b_lana\rub2b_lana\requirements.txt
D:\VSCODE\rub2b_lana\rub2b_lana\rub2b_backup_20250423_3.sql
D:\VSCODE\rub2b_lana\rub2b_lana\rub2b_backup_20250423.sql
D:\VSCODE\rub2b_lana\rub2b_lana\structure.txt

Структура проекта rub2b_lana

Корень проекта: D:\VSCODE\rub2b_lana\rub2b_lana

Описание проекта B2B-платформа для управления прайсами, товарами и аналитикой конкурентов. Backend на FastAPI с PostgreSQL (база rub2b, пользователь germush:Gremushka27112007) использует SQLAlchemy для моделей, Alembic для миграций, Pydantic для валидации. Frontend на React с TypeScript, react-router-dom для роутинга, fetch для API, jwt-decode для токенов. Основной функционал включает авторизацию, загрузку и редактирование прайсов, админские SQL-запросы, управление товарами, аналитику Wildberries (WB-таблицы). Окружение настроено через виртуальное окружение Python (venv) и npm (package.json). Git-игнор исключает временные файлы.

Текущий прогресс: загрузка прайсов в Moderator.tsx обрабатывает Excel (до 44 строк) с поддержкой brand, сохраняет в company_items и goods, возвращает файл ошибок в tmp/. Эндпоинт /goods частично реализован (API в routers/goods.py, UI в Goods.tsx). Добавлены WB-таблицы (search_wb, competitors_wb, goods_wb) для аналитики конкурентов. Реализован SearchWB.tsx для загрузки CSV (~40 МБ, лимит 100 МБ) с поисковыми запросами Wildberries, фильтрацией по ключевым словам (search_words_wb) и категориям (search_words_wb_categories), обновлением search_wb (среднее frequency_per_month), выводом списка запросов с категориями и кликабельными конкурентами. Проблем с портом 3000 нет после очистки процессов.

Следующий шаг: полная реализация /goods с фильтрами по ean13, name, brand, категориям и поддержкой цен (prices). Создание страницы для заполнения categories и competitors для search_wb.

Кэш и временные файлы Папка pycache содержит скомпилированные Python-файлы, создаваемые интерпретатором, и безопасно игнорируется в Git. Папка .pytest_cache хранит кэш pytest для тестов backend, удаление не влияет на работу.

Корневые файлы и папки Файл .gitignore исключает временные файлы (pycache, node_modules, venv, *.xlsx, *.csv, tmp/) для чистоты репозитория. Файл alembic.ini настраивает миграции Alembic с URL PostgreSQL (postgresql://germush:Gremushka27112007@localhost/rub2b) для управления схемой базы. Файл requirements.txt перечисляет зависимости backend (fastapi, sqlalchemy, pandas, psycopg2-binary, pytest, openpyxl), устанавливаемые через pip install -r requirements.txt. Файл structure.txt документирует структуру проекта для разработчиков. Папка backend содержит серверную часть (API, модели, миграции, тесты). Папка frontend включает клиентскую часть (React, UI). Папка venv изолирует зависимости Python, активируется через venv\Scripts\activate. Файлы rub2b_backup_20250423.sql и rub2b_backup_20250423_3.sql хранят дампы базы для восстановления.

Папка backend Сервер на FastAPI обслуживает эндпоинты для авторизации (/login), загрузки прайсов (/moderator/upload-price, /confirm-upload), админских запросов (/admin/structure, /admin/query), управления товарами (/goods), аналитики Wildberries (/search_wb, /competitors_wb, /goods_wb, /search_wb/upload-csv). База PostgreSQL (rub2b) содержит таблицы company_items, goods, users, units, prices, queries, search_wb, competitors_wb и другие. Папка tmp используется для временных файлов, таких как отчеты об ошибках при загрузке прайсов или CSV.

Файл init.py делает backend Python-модулем для импортов. Папка pycache хранит кэш Python. Папка .pytest_cache содержит кэш pytest. Файл main.py запускает FastAPI, подключает роутеры и создает таблицы через Base.metadata.create_all. Файл database.py настраивает подключение к PostgreSQL через SQLAlchemy. Файл pytest.ini конфигурирует pytest (пути, маркеры, PYTHONPATH). Файл requirements.txt дублирует зависимости из корня. Файл utils.py содержит вспомогательные функции (например, для обработки Excel).

Папка alembic управляет миграциями. Файл init.py делает alembic модулем. Файл env.py настраивает подключение и запуск миграций. Файл README документирует Alembic. Файл script.py.mako задает шаблон миграций. Папка versions содержит миграции: 2025_04_18_0045_02a0c57328f3_initial_database_setup.py создает базовые таблицы (users, units); 2025_04_18_1308_aadbb94e6051_add_missing_tables_including_users.py добавляет employee_company, company_items; 2025_04_22_2015_6ed7e3ba8c81_sync_company_items_schema.py синхронизирует company_items (identifier, ean13); 2025_04_22_2038_54152b5df198_add_name_author_active_to_queries.py добавляет name, author, active в queries; 2025_05_06_1200_create_wb_tables.py создает WB-таблицы (search_wb, competitors_wb, goods_wb); 2025_05_06_1545_068ff5c80fd5_merge_multiple_heads.py объединяет ветки; 2025_05_06_1726_3dd1fdf2b394_add_brand_to_goods_and_company_items.py добавляет brand в goods и company_items.

Папка models определяет структуру базы через SQLAlchemy, наследуя от Base (user.py). Файл init.py делает models модулем. Файл category.py описывает таблицу categories (группы товаров: id, name, parent_id, до 3 уровней). Файл company_item_categories.py связывает company_items и categories (many-to-many). Файл company_item.py определяет таблицу company_items (прайсы: id, company_id, identifier, ean13, name, unit_id, brand, rrprice, microwholeprice, mediumwholeprice, maxwholeprice, stock). Файл company.py описывает таблицу companies (id, inn, name, legal_name, legal_address, post_address). Файл competitors_wb.py определяет таблицу competitors_wb (id, hyperlink, name, img_competitors_wb). Файл competitors_wb_categories.py связывает competitors_wb и categories. Файл employee_company.py связывает users и companies (many-to-many). Файл goods_categories.py связывает goods и categories. Файл goods_wb.py описывает таблицу goods_wb (id, article_our, stock, price, name). Файл goods_wb_goods.py связывает goods_wb и goods. Файл goods.py определяет таблицу goods (ean13, name, unit_id, description, category, brand, stock). Файл price_history.py хранит историю цен company_items. Файл prices.py определяет таблицу prices (goods_ean13, company_id, price_type, price). Файл query.py описывает таблицу queries (SQL-запросы админа: id, name, query_text, author, active). Файл search_wb.py определяет таблицу search_wb (id, text, frequency_per_month). Файл search_wb_categories.py связывает search_wb и categories. Файл search_wb_competitors.py связывает search_wb и competitors_wb. Файл search_words_wb.py описывает таблицу search_words_wb (id, name). Файл search_words_wb_categories.py связывает search_words_wb и categories. Файл stock_history.py хранит историю остатков company_items. Файл unit.py описывает таблицу units (id, name, например, шт, уп). Файл user.py определяет таблицу users (id, login, password, role). Файл warehouse.py описывает таблицу warehouses (id, address, company_id).

Папка routers содержит роутеры FastAPI. Файл admin.py реализует /admin/structure (структура базы) и /admin/query (SQL-запросы). Файл auth.py обслуживает /login (JWT-токены). Файл competitors_wb.py управляет /competitors_wb (данные конкурентов Wildberries). Файл goods_wb.py обслуживает /goods_wb (товары Wildberries). Файл goods.py реализует /goods (список товаров, в процессе). Файл moderator.py обслуживает /moderator/upload-price и /confirm-upload (загрузка прайсов). Файл search_wb.py управляет /search_wb (поисковые запросы Wildberries). Файл search_wb_upload.py реализует /search_wb/upload-csv (загрузка CSV), /search_wb/apply-updates (обновление search_wb) и /search_wb (список запросов). Файл search_words_wb.py обслуживает /search_words_wb (ключевые слова Wildberries). Файл units.py управляет /units (единицы измерения).

Папка schemas содержит Pydantic-схемы для валидации. Файл goods.py валидирует данные goods (ean13, name, brand, stock). Файл query.py валидирует queries (query_text, name, author). Файл user.py валидирует users (login, password, role).

Папка tests содержит тесты pytest. Файл init.py делает tests модулем. Файл conftest.py задает фикстуры (SQLite для тестов, клиент FastAPI). Файл test_admin.py тестирует /admin. Файл test_auth.py тестирует /login. Файл test_moderator.py тестирует /moderator/upload-price и /confirm-upload.

Папка frontend Frontend на React с TypeScript реализует UI для авторизации, дашборда, модератора, админа, товаров, аналитики Wildberries. Использует react-router-dom для роутинга, jwt-decode для токенов, fetch для API, papaparse для CSV. Craco исправляет баги Webpack.

Файл .gitignore исключает node_modules и сборки. Файл craco.config.js настраивает Webpack/DevServer. Файл package.json определяет зависимости (react, react-router-dom, jwt-decode, @testing-library/react, papaparse) и скрипты (start, build, test). Файл package-lock.json фиксирует версии зависимостей. Файл README.md описывает запуск и сборку. Файл tsconfig.json настраивает TypeScript (строгая типизация, JSX). Папка node_modules хранит зависимости. Папка public содержит статические файлы: favicon.ico (иконка), index.html (HTML-шаблон), logo192.png и logo512.png (иконки PWA), manifest.json (PWA-манифест), robots.txt (SEO).

Папка src содержит исходники. Файл App.tsx задает роутинг (/, /moderator, /admin, /goods, /search_wb). Файл index.css задает глобальные стили. Файл index.tsx рендерит приложение с BrowserRouter. Папка components содержит переиспользуемые компоненты: Dashboard.tsx (дашборд с навигацией). Папка pages содержит страницы: Admin.tsx (SQL-запросы, структура базы), Goods.tsx (таблица товаров, в процессе), Moderator_item_to_goods.tsx (связь товаров и прайсов), Moderator.tsx (загрузка Excel с brand, редактирование company_items), SearchWB.tsx (загрузка CSV с поисковыми запросами Wildberries, фильтрация по категориям, обновление search_wb, вывод списка запросов). Папка types содержит типы: index.ts (CompanyItem, Goods, User, Config, SearchWB, Category). Папка tests содержит тесты: Admin.test.tsx, Dashboard.test.tsx, DataTable.test.tsx, QueryForm.test.tsx.

Комментарии для ориентировки Backend: точка входа main.py запускает FastAPI, подключает роутеры, создает таблицы. Модели company_item.py (прайсы с brand) и goods.py (товары с brand) — ядро данных. Роутеры auth.py (/login), admin.py (/admin), moderator.py (/moderator), goods.py (/goods, в процессе), search_wb_upload.py (/search_wb/upload-csv, /search_wb/apply-updates) обрабатывают запросы. Миграции в alembic/versions (последняя — 2025_05_06_1726_3dd1fdf2b394) синхронизируют базу, включая brand. Тесты в test_moderator.py проверяют загрузку прайсов. База PostgreSQL (rub2b, germush:Gremushka27112007) содержит company_items, goods, prices, search_wb. Проверка: SELECT * FROM goods; SELECT * FROM company_items; SELECT * FROM search_wb;. Папка tmp хранит файлы ошибок.

Frontend: точка входа index.tsx рендерит App.tsx с роутингом (/, /moderator, /admin, /goods, /search_wb). Moderator.tsx загружает Excel с brand, сохраняет в company_items и goods. Admin.tsx выполняет SQL-запросы. Goods.tsx в разработке (таблица товаров). SearchWB.tsx загружает CSV с поисковыми запросами, фильтрует по ключевым словам и категориям, обновляет search_wb, показывает список запросов с категориями и кликабельными конкурентами. API-запросы через fetch (http://127.0.0.1:8000), токены в localStorage. Тесты в tests покрывают Admin и Dashboard, но не Moderator.tsx или SearchWB.tsx. Craco (craco.config.js) фиксит баги npm start.

Текущий прогресс Загрузка прайсов в Moderator.tsx работает, поддерживает brand, сохраняет в company_items и goods, возвращает ошибки в tmp/. Эндпоинт /goods возвращает список товаров (routers/goods.py), но UI (Goods.tsx) требует доработки (фильтры, цены). WB-таблицы (search_wb, competitors_wb, goods_wb) добавлены для аналитики. SearchWB.tsx реализован для загрузки CSV (~40 МБ, лимит 100 МБ), фильтрации по ключевым словам (search_words_wb) и категориям (обязательный выбор), обновления search_wb (среднее frequency_per_month), вывода списка запросов с категориями (name) и кликабельными конкурентами (hyperlink). Порт 3000 очищен, CORS настроен (main.py).

Проблемы: /goods не полностью реализован (нет фильтров, цен в UI); тесты для Moderator.tsx и SearchWB.tsx отсутствуют.

Советы Следить за логами FastAPI (INFO/ERROR) в консоли. Проверять POST-запросы (/moderator/upload-price, /search_wb/upload-csv) в DevTools (Network). Выполнять SQL: SELECT * FROM goods; SELECT * FROM company_items; SELECT * FROM search_wb; для проверки данных. Создавать миграции (alembic revision --autogenerate) при изменении моделей. Добавить тесты для Moderator.tsx и SearchWB.tsx (загрузка файлов, рендеринг).

Что дальше Реализовать /goods: расширить routers/goods.py (GET /goods с фильтрами по ean13, name, brand, категориям; JOIN с prices для цен); доработать Goods.tsx (таблица с фильтрами, пагинация, цены). Добавить тесты для Moderator.tsx и SearchWB.tsx. Создать страницу для заполнения categories и competitors для search_wb. Если нужны категории для /goods, расширить goods.py (API для categories, goods_categories) и Goods.tsx (фильтры по категориям). Поделиться routers/goods.py и Goods.tsx для доработки.